Description: fs/ext: Use libext2fs instead of spawning dumpe2fs
 Spawning and parsing is more expensive, and dumpe2fs has the annoying
 bug that it triggers udev events when the MMP feature is enabled on a
 filesystem.
Author: Marius Vollmer <mvollmer@redhat.com>
Origin: upstream, https://github.com/storaged-project/libblockdev/pull/783
Bug-Deepin: https://github.com/linuxdeepin/developer-center/issues/5348
Applied-Upstream: https://github.com/storaged-project/libblockdev/commit/355ddb314fdc8936e9ed1e65ee48ed761f0c56bf
# Reviewed-by:
Last-Update: 2023-08-30
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/configure.ac
+++ b/configure.ac
@@ -237,7 +237,9 @@
       [LIBBLOCKDEV_PKG_CHECK_MODULES([MOUNT], [mount >= 2.23.0])
        # new versions of libmount has some new functions we can use
        AS_IF([$PKG_CONFIG --atleast-version=2.30.0 mount],
-             [AC_DEFINE([LIBMOUNT_NEW_ERR_API])], [])
+             [AC_DEFINE([LIBMOUNT_NEW_ERR_API])
+       LIBBLOCKDEV_PKG_CHECK_MODULES([EXT2FS], [ext2fs e2p])]
+      [])
 
        # older versions of parted don't provide the libparted-fs-resize.pc file
        AS_IF([$PKG_CONFIG libparted-fs-resize],
--- a/dist/libblockdev.spec.in
+++ b/dist/libblockdev.spec.in
@@ -475,6 +475,7 @@
 %package nvdimm
 BuildRequires: ndctl-devel
 BuildRequires: libuuid-devel
+BuildRequires: e2fsprogs-devel
 Summary:     The NVDIMM plugin for the libblockdev library
 Requires: %{name}-utils%{?_isa} >= 0.11
 Requires: ndctl
--- a/src/plugins/fs/Makefile.am
+++ b/src/plugins/fs/Makefile.am
@@ -2,8 +2,8 @@
 
 lib_LTLIBRARIES = libbd_fs.la
 
-libbd_fs_la_CFLAGS   = $(GLIB_CFLAGS) $(BLKID_CFLAGS) $(PARTED_CFLAGS) $(PARTED_FS_CFLAGS) $(MOUNT_CFLAGS) -Wall -Wextra -Werror
-libbd_fs_la_LIBADD   = ${builddir}/../../utils/libbd_utils.la ${builddir}/../libbd_part_err.la $(GLIB_LIBS) $(BLKID_LIBS) $(PARTED_LIBS) $(PARTED_FS_LIBS) $(MOUNT_LIBS)
+libbd_fs_la_CFLAGS   = $(GLIB_CFLAGS) $(BLKID_CFLAGS) $(PARTED_CFLAGS) $(PARTED_FS_CFLAGS) $(MOUNT_CFLAGS) $(EXT2FS_CFLAGS) -Wall -Wextra -Werror
+libbd_fs_la_LIBADD   = ${builddir}/../../utils/libbd_utils.la ${builddir}/../libbd_part_err.la $(GLIB_LIBS) $(BLKID_LIBS) $(PARTED_LIBS) $(PARTED_FS_LIBS) $(MOUNT_LIBS) $(EXT2FS_LIBS)
 libbd_fs_la_LDFLAGS	 = -L${srcdir}/../../utils/ -version-info 2:0:0 -Wl,--no-undefined
 libbd_fs_la_CPPFLAGS = -I${builddir}/../../../include/ -I${srcdir}/../
 libbd_fs_la_SOURCES  = ../check_deps.c ../check_deps.h \
--- a/src/plugins/fs/ext.c
+++ b/src/plugins/fs/ext.c
@@ -17,6 +17,9 @@
  * Author: Vratislav Podzimek <vpodzime@redhat.com>
  */
 
+#include <ext2fs.h>
+#include <e2p.h>
+
 #include <blockdev/utils.h>
 #include <check_deps.h>
 
@@ -37,24 +40,21 @@
 #define DEPS_E2FSCK_MASK (1 << DEPS_E2FSCK)
 #define DEPS_TUNE2FS 2
 #define DEPS_TUNE2FS_MASK (1 << DEPS_TUNE2FS)
-#define DEPS_DUMPE2FS 3
-#define DEPS_DUMPE2FS_MASK (1 << DEPS_DUMPE2FS)
-#define DEPS_RESIZE2FS 4
+#define DEPS_RESIZE2FS 3
 #define DEPS_RESIZE2FS_MASK (1 << DEPS_RESIZE2FS)
 
-#define DEPS_LAST 5
+#define DEPS_LAST 4
 
 static const UtilDep deps[DEPS_LAST] = {
     {"mke2fs", NULL, NULL, NULL},
     {"e2fsck", NULL, NULL, NULL},
     {"tune2fs", NULL, NULL, NULL},
-    {"dumpe2fs", NULL, NULL, NULL},
     {"resize2fs", NULL, NULL, NULL},
 };
 
 static guint32 fs_mode_util[BD_FS_MODE_LAST+1] = {
     /*   mkfs          wipe     check               repair                set-label            query                resize */
-    DEPS_MKE2FS_MASK,   0, DEPS_E2FSCK_MASK,   DEPS_E2FSCK_MASK,     DEPS_TUNE2FS_MASK,   DEPS_DUMPE2FS_MASK,  DEPS_RESIZE2FS_MASK
+    DEPS_MKE2FS_MASK,   0, DEPS_E2FSCK_MASK,   DEPS_E2FSCK_MASK,     DEPS_TUNE2FS_MASK,          0          ,  DEPS_RESIZE2FS_MASK
 };
 
 #define UNUSED __attribute__((unused))
@@ -535,115 +535,55 @@
     return ext_set_label (device, label, error);
 }
 
-/**
- * parse_output_vars: (skip)
- * @str: string to parse
- * @item_sep: item separator(s) (key-value pairs separator)
- * @key_val_sep: key-value separator(s) (typically ":" or "=")
- * @num_items: (out): number of parsed items (key-value pairs)
- *
- * Returns: (transfer full): GHashTable containing the key-value pairs parsed
- * from the @str.
- */
-static GHashTable* parse_output_vars (const gchar *str, const gchar *item_sep, const gchar *key_val_sep, guint *num_items) {
-    GHashTable *table = NULL;
-    gchar **items = NULL;
-    gchar **item_p = NULL;
-    gchar **key_val = NULL;
-
-    table = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, g_free);
-    *num_items = 0;
-
-    items = g_strsplit_set (str, item_sep, 0);
-    for (item_p=items; *item_p; item_p++) {
-        key_val = g_strsplit (*item_p, key_val_sep, 2);
-        if (g_strv_length (key_val) == 2) {
-            /* we only want to process valid lines (with the separator) */
-            g_hash_table_insert (table, g_strstrip (key_val[0]), g_strstrip (key_val[1]));
-            g_free (key_val);
-            (*num_items)++;
-        } else
-            /* invalid line, just free key_val */
-            g_strfreev (key_val);
-    }
-
-    g_strfreev (items);
-    return table;
+static gchar *decode_fs_state (unsigned short state) {
+    return g_strdup_printf("%s%s",
+                           (state & EXT2_VALID_FS) ? "clean" : "not clean",
+                           (state & EXT2_ERROR_FS) ? " with errors" : "");
 }
 
-static BDFSExtInfo* get_ext_info_from_table (GHashTable *table, gboolean free_table) {
-    BDFSExtInfo *ret = g_new0 (BDFSExtInfo, 1);
-    gchar *value = NULL;
-
-    ret->label = g_strdup ((gchar*) g_hash_table_lookup (table, "Filesystem volume name"));
-    if (!ret->label || g_strcmp0 (ret->label, "<none>") == 0) {
-        g_free (ret->label);
-        ret->label = g_strdup ("");
-    }
-
-    ret->uuid = g_strdup ((gchar*) g_hash_table_lookup (table, "Filesystem UUID"));
-    if (!ret->uuid || g_strcmp0 (ret->uuid, "<none>") == 0) {
-        g_free (ret->uuid);
-        ret->uuid = g_strdup ("");
-    }
-
-    ret->state = g_strdup ((gchar*) g_hash_table_lookup (table, "Filesystem state"));
-
-    value = (gchar*) g_hash_table_lookup (table, "Block size");
-    if (value)
-        ret->block_size = g_ascii_strtoull (value, NULL, 0);
-    else
-        ret->block_size = 0;
-    value = (gchar*) g_hash_table_lookup (table, "Block count");
-    if (value)
-        ret->block_count = g_ascii_strtoull (value, NULL, 0);
-    else
-        ret->block_count = 0;
-    value = (gchar*) g_hash_table_lookup (table, "Free blocks");
-    if (value)
-        ret->free_blocks = g_ascii_strtoull (value, NULL, 0);
-    else
-        ret->free_blocks = 0;
-
-    if (free_table)
-        g_hash_table_destroy (table);
-
-    return ret;
+static gchar *decode_uuid (void *uuid) {
+    const char *str = e2p_uuid2str(uuid);
+    if (g_strcmp0 (str, "<none>") == 0)
+        str = "";
+    return g_strdup (str);
 }
 
 static BDFSExtInfo* ext_get_info (const gchar *device, GError **error) {
-    const gchar *args[4] = {"dumpe2fs", "-h", device, NULL};
-    gboolean success = FALSE;
-    gchar *output = NULL;
-    GHashTable *table = NULL;
-    guint num_items = 0;
+    errcode_t retval;
+    ext2_filsys fs;
+    struct ext2_super_block *sb;
     BDFSExtInfo *ret = NULL;
 
-    if (!check_deps (&avail_deps, DEPS_DUMPE2FS_MASK, deps, DEPS_LAST, &deps_check_lock, error))
-        return FALSE;
-
-    success = bd_utils_exec_and_capture_output (args, NULL, &output, error);
-    if (!success) {
-        /* error is already populated */
-        return FALSE;
-    }
-
-    table = parse_output_vars (output, "\n", ":", &num_items);
-    g_free (output);
-    if (!table || (num_items == 0)) {
-        /* something bad happened or some expected items were missing  */
-        g_set_error (error, BD_FS_ERROR, BD_FS_ERROR_PARSE, "Failed to parse ext4 file system information");
-        if (table)
-            g_hash_table_destroy (table);
+    int flags = (EXT2_FLAG_JOURNAL_DEV_OK | EXT2_FLAG_SOFTSUPP_FEATURES |
+                 EXT2_FLAG_64BITS | EXT2_FLAG_SUPER_ONLY |
+                 EXT2_FLAG_IGNORE_CSUM_ERRORS);
+
+#ifdef EXT2_FLAG_THREADS
+    flags |= EXT2_FLAG_THREADS;
+#endif
+
+    retval = ext2fs_open (device,
+                          flags,
+                          0, // use_superblock
+                          0, // use_blocksize
+                          unix_io_manager,
+                          &fs);
+    if (retval) {
+        g_set_error (error, BD_FS_ERROR, BD_FS_ERROR_FAIL, "Failed to open ext4 file system");
         return NULL;
     }
 
-    ret = get_ext_info_from_table (table, TRUE);
-    if (!ret) {
-        g_set_error (error, BD_FS_ERROR, BD_FS_ERROR_PARSE, "Failed to parse ext4 file system information");
-        return NULL;
-    }
+    sb = fs->super;
+    ret = g_new0 (BDFSExtInfo, 1);
+
+    ret->label = g_strndup ((gchar *)sb->s_volume_name, sizeof (sb->s_volume_name));
+    ret->uuid = decode_uuid (sb->s_uuid);
+    ret->state = decode_fs_state (sb->s_state);
+    ret->block_size = EXT2_BLOCK_SIZE (sb);
+    ret->block_count = ext2fs_blocks_count (sb);
+    ret->free_blocks = ext2fs_free_blocks_count (sb);
 
+    ext2fs_close_free (&fs);
     return ret;
 }
 
